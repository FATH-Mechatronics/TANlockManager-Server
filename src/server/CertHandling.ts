import * as mkcert from 'mkcert-geek-fork';
import * as ip from 'ip';
import * as fs from 'fs';
import * as path from 'path';

import TanLock from '../model/TanLock';
import BaseDirProvider from '../data/BaseDirProvider';

export default class CertHandling {
    public static getCA() {
        return new Promise((accept, reject) => {
            const basePath = BaseDirProvider.getBasePath();
            fs.access(path.join(basePath, "ca.key"),fs.constants.R_OK,  (err) => {
                if (err) {
                    mkcert.createCA({
                        organization: 'TANlock AutoGenerated CA',
                        countryCode: 'DE',
                        state: 'Bayern',
                        locality: 'Spalt',
                        validityDays: 730,
                        bits: 4096
                    })
                        .then(ca => {
                            fs.writeFile(path.join(basePath, "ca.key"), ca.key, err => {
                                if (!err) {
                                    fs.writeFile(path.join(basePath, "ca.crt"), ca.cert, err => {
                                        if (!err) {
                                            accept(ca);
                                        } else {
                                            reject(err);
                                        }
                                    });
                                } else {
                                    reject(err);
                                }
                            });
                        })
                        .catch(err => {
                            reject(err);
                        });
                } else {
                    const ca = { key: "", cert: "" };
                    fs.readFile(path.join(basePath, "ca.key"), (err, data) => {
                        if (!err) {
                            ca.key = data.toString('utf8');
                            fs.readFile(path.join(basePath, "ca.crt"), (err, data) => {
                                if (!err) {
                                    ca.cert = data.toString('utf8');
                                    accept(ca);
                                } else {
                                    reject(err);
                                }
                            });
                        } else {
                            reject(err);
                        }
                    });
                }
            });
        });
    }

    public static getCert(tanlock: TanLock|null = null) {
        if (tanlock === null) {
            return this.generateOrGet("cert");
        } else {
            return new Promise((accept, reject) => reject("NOT IMPLEMENTED, CREATION OF TANlock CERTS"));
        }
    }

    public static getJWT() {
        return this.generateOrGet("jwt");
    }

    private static generateOrGet(name = "cert", subFolder = ".", domains: string[] = []) {
        const basePath = BaseDirProvider.getBasePath();
        return new Promise((accept, reject) => {
            this.getCA().then((ca: { key: string, cert: string }) => {
                fs.access(path.join(basePath, subFolder, `${name}.key`), err => {
                    if (err) {
                        if (domains.length === 0) {
                            domains = ['127.0.0.1', 'localhost', ip.address()];
                        }
                        console.log(`Creating "${name}" Keys for ${domains}`);
                        mkcert.createCert({
                            domains,
                            validityDays: 365,
                            caKey: ca.key,
                            caCert: ca.cert,
                            bits: 2048
                        })
                            .then(cert => {
                                fs.writeFile(path.join(basePath, `${name}.key`), cert.key, err => {
                                    if (!err) {
                                        fs.writeFile(path.join(basePath, `${name}.crt`), cert.cert, err => {
                                            if (!err) {
                                                accept({ ca, cert });
                                            } else {
                                                reject(err);
                                            }
                                        });
                                    } else {
                                        reject(err);
                                    }
                                });
                            })
                            .catch(err => {
                                reject(err);
                            });
                    } else {
                        fs.readFile(path.join(basePath, `${name}.key`), (err, data) => {
                            const cert = { key: "", cert: "" };
                            if (!err) {
                                cert.key = data.toString("utf8");
                                fs.readFile(path.join(basePath, `${name}.crt`), (err, data) => {
                                    if (!err) {
                                        cert.cert = data.toString("utf8");
                                        accept({ ca, cert });
                                    } else {
                                        reject(err);
                                    }
                                });
                            } else {
                                reject(err);
                            }
                        })
                    }
                })
            }).catch(err => {
                reject(err);
            });
        });
    }
}
